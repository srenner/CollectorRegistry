@page "/site/{siteID:int}/item/{itemID:int}"
@using CollectorRegistry.Shared
@using CollectorRegistry.Shared.ViewModels;
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager


@if (item != null)
{
    <PageTitle>@site.ItemNickname Registry @@ CollectorRegistry</PageTitle>

    <header>
        <h1 style="border-bottom: 4px solid @site.PrimaryColor">@item.SerialNumber</h1>
    </header>

    <button class="btn btn-primary">
        <span>Add Registry Entry</span>

    </button>


    <div>
        <ItemMap/>
    </div>
    <hr />
    <div>
        <ItemTimeline/>
    </div>

    @foreach(var entry in item.Entries.OrderByDescending(o => o.EntryDateTime))
    {
        <Entry EntryVM="entry" SiteVM="site" />
    }

}

@code {
    private SiteViewModel? site;
    private ItemViewModel? item;

    [Parameter]
    public int? siteID { get; set; }
    [Parameter]
    public int itemID{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        //try
        {
            var client = ClientFactory.CreateClient("CollectorRegistry.AnonymousServerAPI");
            site = await client.GetFromJsonAsync<SiteViewModel>("api/Site/" + siteID);
            item = await client.GetFromJsonAsync<ItemViewModel>("api/Item/" + itemID);

            if (item.SiteID != siteID)
            {
                // item does not belong to site
                // error message and/or redirect
                // not a security issue because both the item and the site are publicly available separately
                NavManager.NavigateTo("/site/" + siteID.ToString());
            }
            else
            {
                //item site is correct


            }

        }
        //catch (Exception exception)
        {
            //throw exception;
            
        }
    }
}