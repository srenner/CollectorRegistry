@* Displays a random registry entry for a site *@

@using CollectorRegistry.Shared.ViewModels;
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager


@if(entry != null && entry.EntryID > 0 && site != null)
{
    <div class="card mt-3 mb-3">
        <h5 class="card-header fw-bold" style="background-color: @site.SecondaryColor; color: @site.PrimaryColor">
            <a href="" @onclick="@NavToItem" @onclick:preventDefault>RANDOM ENTRY</a>
            <span class="oi oi-reload small ms-3" style="cursor: pointer" aria-hidden="true" @onclick="() => LoadRandomEntry()"></span>
        </h5>
        <div class="card-body">
            <p class="card-text">@entry.Comments</p>
        </div>
    </div>
}

@code {
    [Parameter]
    public int SiteID { get; set; }

    EntryViewModel? entry;
    SiteViewModel? site;

    protected override async Task OnInitializedAsync()
    {
        {
            var client = ClientFactory.CreateClient("CollectorRegistry.AnonymousServerAPI");
            await LoadRandomEntry(client);
            site = await client.GetFromJsonAsync<SiteViewModel>("api/Site/" + SiteID);
        }
    }

    private async Task LoadRandomEntry(HttpClient? client = null)
    {
        if(client == null)
        {
            client = ClientFactory.CreateClient("CollectorRegistry.AnonymousServerAPI");
        }
        entry = await client.GetFromJsonAsync<EntryViewModel>("api/Entry/" + SiteID + "/random");
    }

    private void NavToItem()
    {
        NavManager.NavigateTo("/site/" + site?.SiteID.ToString() + "/item/" + entry?.ItemID.ToString());
    }
}
