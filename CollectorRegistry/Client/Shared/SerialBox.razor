@* Textbox search component to find an item within a site by exact match *@
@using CollectorRegistry.Shared.ResultModels;
@using CollectorRegistry.Shared.ViewModels;
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager

@if(Site != null)
{
    <div>
        <div class="d-flex justify-content-center">
            <h4>
            <label class="form-label" for="inputSerialSearchText">Start by entering a @Site.SerialNumberLabel here:</label>
        </h4>
        </div>
        <form class="d-flex justify-content-center" @onsubmit="FindItem">
            <div class="col-auto text-center">
                <div class="input-group">
                    <input id="inputSerialSearchText" class="form-control" placeholder="@Site.SerialNumberHint" @bind="serialSearchText" />
                    <button type="submit" class="btn btn-primary">Go!</button>
                </div>
            </div>
        </form>
    </div>

    @if(findResult != null)
    {
        if(findResult.IsFound)
        {
            NavManager.NavigateTo("/site/" + Site.SiteID.ToString() + "/item/" + findResult.Item?.ItemID.ToString());
        }
        else
        {
            <div class="d-flex justify-content-center">
                @if(findResult.IsPatternMatch)
                {
                    <div>Did not find this @Site.ItemNickname. Would you like to add it? [<button type="button" class="btn btn-link btn-sm" @onclick="AddItem">yes</button>/<button type="button" class="btn btn-link btn-sm" @onclick="() => { findResult = null; }">no</button>]</div>
                }
                else
                {
                    <div>
                        <p>Invalid entry. Here are the basic rules:</p>
                        <ul>
                            @if(this.Site.SerialNumberStartsWith?.Length > 0)
                            {
                                <li>Starts with @Site.SerialNumberStartsWith</li>
                            }
                            @if(this.Site.SerialNumberEndsWith?.Length > 0)
                            {
                                <li>Ends with @Site.SerialNumberEndsWith</li>
                            }
                            @if( this.Site.SerialNumberMinLength.HasValue &&  this.Site.SerialNumberMinLength == this.Site.SerialNumberMaxLength)
                            {
                                <li>Exactly @Site.SerialNumberMinLength characters</li>
                            }
                            else
                            {
                                @if (this.Site.SerialNumberMinLength.HasValue)
                                {
                                    <li>At least @Site.SerialNumberMinLength characters</li>
                                }
                                @if (this.Site.SerialNumberMaxLength.HasValue)
                                {
                                    <li>At most @Site.SerialNumberMaxLength characters</li>
                                }
                            }
                            @if(this.Site.SerialNumberHint?.Length > 0)
                            {
                                <li>Example hint: @Site.SerialNumberHint</li>
                            }
                        </ul>
                    </div>
                }
            </div>
        }
    }
}

@code {
    [Parameter]
    public int SiteID { get; set; }

    [Parameter]
    public SiteViewModel? Site { get; set; }

    private string serialSearchText = String.Empty;
    private ItemFindResultModel? findResult = null;
    private HttpClient anonymousClient = null;

    protected override async Task OnInitializedAsync()
    {
        anonymousClient = ClientFactory.CreateClient("CollectorRegistry.AnonymousServerAPI");
        if(Site == null)
        {
            Site = await anonymousClient.GetFromJsonAsync<SiteViewModel>("api/Site/" + SiteID);
        }
    }

    private async Task FindItem()
    {
        if(serialSearchText.Length > 0)
        {
            findResult = await anonymousClient.GetFromJsonAsync<ItemFindResultModel>("api/Item/" + SiteID.ToString() + "/find/" + serialSearchText);
        }
        else
        {
            findResult = new ItemFindResultModel
            {
                IsFound = false,
                IsPatternMatch = false,
                Item = null,
                SearchText = ""
            };
        }
    }

    private async Task AddItem()
    {
        var postBody = new ItemViewModel { SiteID = SiteID, SerialNumber = serialSearchText };
        var response = await anonymousClient.PostAsJsonAsync("api/Item", postBody);
        if(response.IsSuccessStatusCode)
        {

            var itemID = await response.Content.ReadAsStringAsync();

            NavManager.NavigateTo("/site/" + SiteID.ToString() + "/item/" + itemID);
        }
    }

}
